#!/bin/bash
kkae_version='1.2'

# Needed for macOS compatibility
export LC_ALL=C

debug_message() {
if [[ "${debug}" == 'true' ]] ; then
  printf "%s\n" "${@}"
fi
}

usage() {
cat << EOF
usage: ${0} [-asmnpPvbh] [-l LENGTH] [-c CASE] [-e LIST] [-r MIN-MAX]
Generate a random password and save it into the clipboard.
  -l LENGTH   Character length of the password (default is ${password_length}).
  -c CASE     Only include lowercase or uppercase letters.
  -a          Only include alphanumerical characters.
  -s          Include normally ignored similar characters (${similar_characters}).
  -e 'LIST'   String (in single quotes) or path to file with excluded characters.
  -r MIN-MAX  Percentage range of special characters (default is ${min_special_characters_ratio}-${max_special_characters_ratio}).
  -m          Save the password into the middle-click clipboard.
  -n          Do not send a notification when the password has been saved.
  -p          Print the password instead of saving it into the clipboard.
  -P          Same as -p, but without the trailing newline.
  -v          Show current settings and exit.
  -b          Enable debug mode.
  -h          Print these instructions and exit.
EOF
}

password_length='16'
maximum_password_length='256'
password_case='both' # valid values: lowercase, uppercase, both
tr_character_set='[:graph:]' # man tr to see available options
similar_characters="0oO1lI\"'"
excluded_characters=''
min_special_characters_ratio='10' # minimum percentage of special characters
max_special_characters_ratio='20' # maximum percentage of special characters
middle_click_clipboard='false'
do_not_notify='false'
countdown='5' # time in seconds searching for a valid password before giving up
debug='false'
# If /etc/kkae.conf exists, overwrite the variables
if [[ -f /etc/kkae.conf ]] ; then
  source /etc/kkae.conf
fi
# If ~/.config/kkae.conf exists, overwrite the variables
if [[ -f ~/.config/kkae.conf ]] ; then
  source ~/.config/kkae.conf
fi

# Parse the command-line options
while getopts l:c:ase:r:mnpPvbh option ; do
  case ${option} in
    l) password_length="${OPTARG}"
       if ! [[ "${password_length}" =~ ^[0-9]+$ ]] ||\
       [[ "${password_length}" -lt 0 ]] ||\
       [[ "${password_length}" -gt "${maximum_password_length}" ]]
       then
         printf "Option -l requires a number between 0 and %s.\n" "${maximum_password_length}">&2
         printf "Edit /etc/kkae.conf or ~/.config/kkae.conf to change the maximum password length.\n" >&2
         exit 1
       fi ;;
    c) password_case="${OPTARG}"
       if [[ "${password_case}" == 'lowercase' ]] ; then
         excluded_letters='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
       elif [[ "${password_case}" == 'uppercase' ]] ; then
         excluded_letters='abcdefghijklmnopqrstuvwxyz'
       else
         printf "Option -c accepts the following paramaters: lowercase, uppercase.\n" >&2
         exit 1
       fi
       ;;
    a) tr_character_set='[:alnum:]' ;;
    s) similar_characters='' ;;
    e) if [[ -f "${OPTARG}" ]] ; then
         excluded_characters=$(tr -d '\n' < "${OPTARG}")
       else
         excluded_characters="${OPTARG}"
       fi
       ;;
    r) min_special_characters_ratio="$(echo "${OPTARG}" | cut -d'-' -f1)"
       max_special_characters_ratio="$(echo "${OPTARG}" | cut -d'-' -f2)"
       if ! [[ "${min_special_characters_ratio}" =~ ^[0-9]+$ ]] ||\
       ! [[ "${max_special_characters_ratio}" =~ ^[0-9]+$ ]] ||\
       [[ "${min_special_characters_ratio}" -gt "${max_special_characters_ratio}" ]] ; then
         printf "Invalid range: -r %s\n" "${OPTARG}" >&2
         exit 1
       fi
       if [[ "${max_special_characters_ratio}" -lt 1 ]] ; then
         printf "Upper range of -r can't be lower than 1.\nIf you want to exclude special characters entirely, use -a instead.\n" >&2
         exit 1
       fi ;;
    m) middle_click_clipboard='true' ;;
    n) do_not_notify='true' ;;
    p) print_password='newline' ;;
    P) print_password='nonewline' ;;
    v) print_current_settings='true' ;;
    b) debug='true' ;;
    h) usage && exit 0 ;;
    *) usage && exit 1 ;;
  esac
done

# Clear the options parsed by getopts
shift $(( OPTIND - 1 ))

# Exit in case an invalid option has been entered
if [[ "${#}" -gt 0 ]] ; then
  printf "Invalid option or parameter: %s\n" "${@}" >&2
  usage
  exit 1
fi

# Determine the platform the script is running on
if uname -r | grep -qi Microsoft ; then
  os='windows'
  debug_message "System detected: Windows Subsystem for Linux"
  kkae_notification() {
    if [[ "${do_not_notify}" == 'false' ]] ; then
      wsl-notify-send.exe --appId kkae --category kkae --expire-time 1 "${1}"
    fi
  }
elif [[ $(uname) == 'Darwin' ]] ; then
  os='macos'
  debug_message "System detected: macOS"
  kkae_notification() {
    if [[ "${do_not_notify}" == 'false' ]] ; then
      osascript -e "display notification \"${1}\" with title \"kkae\""
    fi
  }
else
  os='linux'
  debug_message "System detected: Linux"
  kkae_notification() {
    if [[ "${do_not_notify}" == 'false' ]] ; then
      notify-send -t 1000 --hint=int:transient:1 -i dialog-password-symbolic kkae "${1}"
    fi
  }
fi

# Check which characters can be used with the current parameters
valid_characters=$(tr -dc "${tr_character_set}" < /dev/urandom |\
tr -d "${excluded_characters}${similar_characters}${excluded_letters}" |\
head -c 10000 | fold -w1 | sort -u | tr -d '\n')
debug_message "Valid characters: ${valid_characters}"
valid_special_characters=$(echo "${valid_characters}" | tr -d '[:alnum:]' |\
head -c 10000 | fold -w1 | sort -u | tr -d '\n')
debug_message "Valid special characters: ${valid_special_characters}"

# Determine the minimum and maximum amount of special characters the password must contain
min_special_characters="$(( password_length * min_special_characters_ratio / 100 ))"
debug_message "Minimum amount of special characters: ${min_special_characters} (${min_special_characters_ratio}%)"
max_special_characters="$(( password_length * max_special_characters_ratio / 100 ))"
debug_message "Maximum amount of special characters: ${max_special_characters} (${max_special_characters_ratio}%)"
if [[ "${max_special_characters}" -eq 0 ]] ; then
  max_special_characters='1'
  debug_message "Maximum amount of special characters set to 1 to account for rounding."
fi

if [[ "${print_current_settings}" = 'true' ]] ; then
cat << EOF
$(tput bold)kkae v${kkae_version}$(tput sgr0)
$(tput bold)Options passed in the terminal overwrite settings from /etc/kkae.conf$(tput sgr0)
$(tput bold)Password length:$(tput sgr0) ${password_length}
$(tput bold)Valid characters:$(tput sgr0) ${valid_characters}
$(tput bold)Minimum amount of special characters:$(tput sgr0) ${min_special_characters} (${min_special_characters_ratio}%)
$(tput bold)Maximum amount of special characters:$(tput sgr0) ${max_special_characters} (${max_special_characters_ratio}%)
$(tput bold)Excluded characters:$(tput sgr0) ${similar_characters}${excluded_characters}
$(tput bold)Copy to the middle-click clipboard:$(tput sgr0) ${middle_click_clipboard}
$(tput bold)Do not send notifications:$(tput sgr0) ${do_not_notify}
$(tput bold)Give up finding a valid password after:$(tput sgr0) ${countdown}s
$(tput bold)Debug mode enabled:$(tput sgr0) ${debug}
EOF
exit 0
fi

generate_password() {
  password=$(tr -dc "${tr_character_set}" < /dev/urandom |\
  tr -d "${excluded_characters}${similar_characters}${excluded_letters}" |\
  head -c "${password_length}")
}

debug_message "Generating the passwordâ€¦"
# Pass a non-zero diversity target to trigger the while loop
password_diversity_target='1'
# Generate passwords until at least one character of each selected category is found in a single password
until [[ "${password_diversity}" -eq "${password_diversity_target}" ]] ; do
  (( password_generation_attempts += 1 ))
  timeout() {
    debug_message "${password_generation_attempts} passwords were generated, none passed the validity check."
    printf "Aborted: could not generate a valid password after %ss.\n" "${countdown}" >&2
    printf "Try again, or review your parameters.\n" >&2
    printf "Alternatively, edit /etc/kkae.conf or ~/.config/kkae.conf to increase the timeout.\n" >&2
    kkae_notification "Could not generate a valid password in time."
    exit 3
  }
  # Quit the program if a valid password could not be generated before the ${countdown}
  (( SECONDS < countdown )) || timeout
  generate_password
  # Reset the password diversity target on each new pass
  password_diversity_target='0'
  # Check if the password should contain at least one character of a given category
  if [[ "${valid_characters}" == *[0-9]* ]] ; then
    (( password_diversity_target += 1 ))
  fi
  if [[ "${valid_characters}" == *[a-z]* ]] ; then
    (( password_diversity_target += 1 ))
  fi
  if [[ "${valid_characters}" == *[A-Z]* ]] ; then
    (( password_diversity_target += 1 ))
  fi
  if [[ "${#valid_special_characters}" -gt 0 ]] ; then
    (( password_diversity_target += 1 ))
  fi

  # Reset the password diversity on each new pass
  password_diversity='0'
  # Check if the password contains at least one number of a given category
  if [[ "${password}" == *[0-9]* ]] ; then
    (( password_diversity += 1 ))
  fi
  if [[ "${password}" == *[a-z]* ]] ; then
    (( password_diversity += 1 ))
  fi
  if [[ "${password}" == *[A-Z]* ]] ; then
    (( password_diversity += 1 ))
  fi
  special_characters_in_password=$(printf "%s" "${password}" | tr -d 'a-zA-Z0-9')
  if [[ "${#special_characters_in_password}" -ge min_special_characters ]] &&\
  [[ "${#special_characters_in_password}" -le max_special_characters ]] ; then
    (( password_diversity += 1 ))
  fi
done
debug_message "A valid password was found after ${password_generation_attempts} attempt(s)."

if [[ "${print_password}" = 'newline' ]] ; then
  debug_message "Printing password:"
  echo "${password}"
  exit 0
elif [[ "${print_password}" = 'nonewline' ]] ; then
  debug_message "Printing password:"
  printf "%s" "${password}"
  exit 0
fi

# Save the password in the clipboard
case "${os}" in
  linux)    save_password_in_wayland_clipboard() {
            if [[ "${middle_click_clipboard}" = 'true' ]] ; then
              debug_message "Saving the password into the middle-click clipboard."
              selection='--primary'
            fi
            printf "%s" "${password}" | wl-copy ${selection} 2> /dev/null || return 1
            debug_message "Password copied into the Wayland clipboard."
            }
            save_password_in_x11_clipboard() {
            if [[ ${middle_click_clipboard} = 'true' ]] ; then
              debug_message "Saving the password into the middle-click clipboard."
              selection='primary'
            else
              selection='clipboard'
            fi
            printf "%s" "${password}" | xclip -selection ${selection}
            debug_message "Password copied into the X11 clipboard."
            }
            save_password_in_wayland_clipboard || save_password_in_x11_clipboard ;;
  macos)    if [[ "${middle_click_clipboard}" = 'true' ]] ; then
              printf "Error: middle-click clipboard not available on macOS.\n" >&2
              exit 1
            fi
            printf "%s" "${password}" | pbcopy
            debug_message "Password copied into the macOS clipboard." ;;
  windows)  if [[ "${middle_click_clipboard}" = 'true' ]] ; then
              printf "Error: middle-click clipboard not available on WSL.\n" >&2
              exit 1
            fi
            printf "%s" "${password}" | clip.exe
            debug_message "Password copied into the Windows clipboard." ;;
esac

kkae_notification "New random password saved in the clipboard."

exit 0

